
import React, { useState, useEffect, useCallback } from 'react';
import { getHealthTip } from '../services/geminiService';
import { HealthTip } from '../types';
import { HealthTipsIcon } from './icons/HealthIcons';

const LoadingSpinner: React.FC = () => (
    <div className="flex flex-col items-center justify-center text-center p-8 text-neutral-500">
        <svg className="animate-spin h-8 w-8 text-indigo-500 mb-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        <p>Fetching your daily tip...</p>
    </div>
);

const HealthTips: React.FC = () => {
    const [tip, setTip] = useState<HealthTip | null>(null);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    const fetchTip = useCallback(async () => {
        setIsLoading(true);
        setError(null);
        try {
            const result = await getHealthTip();
            setTip(result);
        } catch (err) {
            setError(err instanceof Error ? err.message : 'An unknown error occurred.');
        } finally {
            setIsLoading(false);
        }
    }, []);

    useEffect(() => {
        fetchTip();
    }, [fetchTip]);

    return (
        <div className="max-w-3xl mx-auto flex flex-col items-center justify-center">
            <div className="bg-white p-8 rounded-2xl shadow-sm w-full min-h-[20rem] flex flex-col justify-between">
                {isLoading ? (
                    <LoadingSpinner />
                ) : error ? (
                    <div className="text-center p-8 text-red-600">
                        <p className="font-semibold">Oops! Something went wrong.</p>
                        <p className="text-sm mb-4">{error}</p>
                        <button
                            onClick={fetchTip}
                            className="px-4 py-2 bg-red-500 text-white font-semibold rounded-full hover:bg-red-600 transition-colors"
                        >
                            Try Again
                        </button>
                    </div>
                ) : tip ? (
                    <div className="text-center flex-1 flex flex-col items-center justify-center">
                         <div className="bg-indigo-100 text-indigo-600 rounded-full p-4 mb-4">
                            <HealthTipsIcon />
                        </div>
                        <h3 className="text-2xl font-bold text-neutral-800 mb-4">{tip.title}</h3>
                        <p className="text-neutral-600 text-lg leading-relaxed">{tip.tip}</p>
                    </div>
                ) : null}

                <div className="mt-8 flex justify-end border-t pt-6">
                    <button
                        onClick={fetchTip}
                        disabled={isLoading}
                        className="px-6 py-2 bg-indigo-500 text-white font-semibold rounded-full hover:bg-indigo-600 disabled:bg-neutral-400 disabled:cursor-not-allowed transition-colors duration-200 shadow-sm hover:shadow-md"
                    >
                        {isLoading ? 'Loading...' : 'Get New Tip'}
                    </button>
                </div>
            </div>
             <p className="text-xs text-neutral-400 mt-4 text-center">
                Health tips are generated by an AI and are for informational purposes only. Consult a healthcare professional for medical advice.
            </p>
        </div>
    );
};

export default HealthTips;
